{"paragraphs":[{"text":"%md\n\n<center> ![Flink](https://raw.githubusercontent.com/DataReplyUK/FlinkGroupLondon/master/2016-03-03%20KmeansZeppelinNotebook/logo.png) </center>\n# <center> Apache Flink: K-Means Example </center>\n# <br>\n## <center> Ignas Vadaisa </center>\n### <center> Data Scientist @ Data Reply UK </center>\n# <br>\n# <br>\n### Source: [http://flink.apache.org](https://ci.apache.org/projects/flink/flink-docs-release-0.9/quickstart/run_example_quickstart.html)\n### Notebook: will be uploaded on GitHub\n### Prerequisites: Apache Flink, Scala, Apache Zeppelin, Java, Python 2","dateUpdated":"Mar 6, 2016 6:16:38 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456073696926_-1232838338","id":"20160221-165456_919327168","result":{"code":"SUCCESS","type":"HTML","msg":"<p><center> <img src=\"https://raw.githubusercontent.com/DataReplyUK/FlinkGroupLondon/master/2016-03-03%20KmeansZeppelinNotebook/logo.png\" alt=\"Flink\" /> </center></p>\n<h1><center> Apache Flink: K-Means Example </center></h1>\n<h1><br></h1>\n<h2><center> Ignas Vadaisa </center></h2>\n<h3><center> Data Scientist @ Data Reply UK </center></h3>\n<h1><br></h1>\n<h1><br></h1>\n<h3>Source: <a href=\"https://ci.apache.org/projects/flink/flink-docs-release-0.9/quickstart/run_example_quickstart.html\">http://flink.apache.org</a></h3>\n<h3>Notebook: will be uploaded on GitHub</h3>\n<h3>Prerequisites: Apache Flink, Scala, Apache Zeppelin, Java, Python 2</h3>\n"},"dateCreated":"Feb 21, 2016 4:54:56 PM","dateStarted":"Mar 6, 2016 6:16:35 PM","dateFinished":"Mar 6, 2016 6:16:35 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22","focus":true},{"text":"%md\n\n##Data\n\n<center> ![Scatterplot](https://raw.githubusercontent.com/DataReplyUK/FlinkGroupLondon/master/2016-03-03%20KmeansZeppelinNotebook/input-points-plot.png) </center>\n\n### (x,y) points, N = 500, K = 10, s.d. = 0.08, seed = 314","dateUpdated":"Mar 6, 2016 6:17:29 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456959661788_-7682455","id":"20160302-230101_135392893","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Data</h2>\n<p><center> <img src=\"https://raw.githubusercontent.com/DataReplyUK/FlinkGroupLondon/master/2016-03-03%20KmeansZeppelinNotebook/input-points-plot.png\" alt=\"Scatterplot\" /> </center></p>\n<h3>(x,y) points, N = 500, K = 10, s.d. = 0.08, seed = 314</h3>\n"},"dateCreated":"Mar 2, 2016 11:01:01 PM","dateStarted":"Mar 6, 2016 6:17:24 PM","dateFinished":"Mar 6, 2016 6:17:24 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23","focus":true},{"text":"%md\n\n## K-means algorithm\n\n<center> ![Animation](https://raw.githubusercontent.com/DataReplyUK/FlinkGroupLondon/master/2016-03-03%20KmeansZeppelinNotebook/anim.gif) </center>","dateUpdated":"Mar 6, 2016 6:18:28 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457022106377_1648373624","id":"20160303-162146_1156248986","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>K-means algorithm</h2>\n<p><center> <img src=\"https://raw.githubusercontent.com/DataReplyUK/FlinkGroupLondon/master/2016-03-03%20KmeansZeppelinNotebook/anim.gif\" alt=\"Animation\" /> </center></p>\n"},"dateCreated":"Mar 3, 2016 4:21:46 PM","dateStarted":"Mar 6, 2016 6:18:26 PM","dateFinished":"Mar 6, 2016 6:18:26 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:24","focus":true},{"text":"%md\n\n##Dependencies and parameters","dateUpdated":"Mar 3, 2016 7:13:14 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456074775771_150463129","id":"20160221-171255_844334006","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Dependencies and parameters</h2>\n"},"dateCreated":"Feb 21, 2016 5:12:55 PM","dateStarted":"Mar 3, 2016 7:13:14 PM","dateFinished":"Mar 3, 2016 7:13:14 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:25"},{"text":"%flink\n\nimport org.apache.flink.configuration._\nimport org.apache.flink.core.fs.FileSystem.WriteMode\nimport scala.collection.JavaConverters._\n\nval pointsPath = \"./FlinkKmeans/points\"\nval centersPath = \"./FlinkKmeans/centers\"\nval outputPath = \"./FlinkKmeans/results\"\nval numIterations = 10","dateUpdated":"Mar 3, 2016 7:13:17 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456074842620_-1146986783","id":"20160221-171402_483200307","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.flink.configuration._\nimport org.apache.flink.core.fs.FileSystem.WriteMode\nimport scala.collection.JavaConverters._\npointsPath: String = ./FlinkKmeans/points\ncentersPath: String = ./FlinkKmeans/centers\noutputPath: String = ./FlinkKmeans/results\nnumIterations: Int = 10\n"},"dateCreated":"Feb 21, 2016 5:14:02 PM","dateStarted":"Mar 3, 2016 7:13:17 PM","dateFinished":"Mar 3, 2016 7:13:18 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:26"},{"text":"%md\n\n##Classes","dateUpdated":"Mar 3, 2016 5:54:56 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456074921821_-576713937","id":"20160221-171521_646789942","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Classes</h2>\n"},"dateCreated":"Feb 21, 2016 5:15:21 PM","dateStarted":"Mar 3, 2016 5:54:56 PM","dateFinished":"Mar 3, 2016 5:54:56 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27"},{"text":"%flink\n\n// Main data type\n\nclass Point(var x: Double, var y: Double) extends Serializable {\n    \n    // If no parameters passed, initiate to (0, 0)\n    def this() {\n      this(0, 0)\n    }\n    \n    // Sum of coordinates\n    def add(other: Point): Point = {\n      x += other.x\n      y += other.y\n      this\n    }\n\n    // Will be used to find average location\n    def div(other: Long): Point = {\n      x /= other\n      y /= other\n      this\n    }\n\n    // Distance between two Points\n    def euclideanDistance(other: Point): Double = {\n      Math.sqrt((x - other.x) * (x - other.x) + (y - other.y) * (y - other.y))\n    }\n\n    // Writing utility\n    override def toString: String = {\n      x + \" \" + y\n    }\n    \n}\n\n\n\n// Cluster center point\n\nclass Centroid(var id: Int, x: Double, y: Double) extends Point(x, y) {\n    \n    // If no parameters passed, initiate to (0, 0, 0)\n    def this() {\n      this(0, 0, 0)\n    }\n\n    // Alternatively, initiate from an id and a Point\n    def this(id: Int, p: Point) {\n      this(id, p.x, p.y)\n    }\n\n    // Writing utility\n    override def toString: String = {\n      id + \" \" + super.toString\n    }\n    \n}\n\n\n\n// Finds closest center for a given point\n// RichMapFunction has to be extended in order to acces broadcast variables\n\nclass SelectNearestCenter extends RichMapFunction[Point, (Int, Point)] {\n    \n    // A placeholder\n    var centroids: Iterable[Centroid] = null\n\n    // Get broadcaseted centroids\n    override def open(parameters: Configuration) {\n      centroids = getRuntimeContext.getBroadcastVariable[Centroid](\"centroids\")\n                                   .asScala\n    }\n\n    // A custom map()\n    def map(p: Point): (Int, Point) = {\n      \n      var minDistance: Double = Double.MaxValue\n      var closestCentroidId: Int = -1\n      \n      // Iterate over center points\n      for (centroid <- centroids) {\n        \n        // Find their distances to the current point\n        val distance = p.euclideanDistance(centroid)\n        \n        // Remember the closest one\n        if (distance < minDistance) {\n            \n          minDistance = distance\n          closestCentroidId = centroid.id\n          \n        }\n        \n      }\n     \n      (closestCentroidId, p)\n      \n    }\n    \n}","dateUpdated":"Mar 3, 2016 7:13:20 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456074929272_654497868","id":"20160221-171529_1370171702","result":{"code":"SUCCESS","type":"TEXT","msg":"defined class Point\ndefined class Centroid\ndefined class SelectNearestCenter\n"},"dateCreated":"Feb 21, 2016 5:15:29 PM","dateStarted":"Mar 3, 2016 7:13:20 PM","dateFinished":"Mar 3, 2016 7:13:20 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28"},{"text":"%md\n\n## Data input","dateUpdated":"Mar 3, 2016 5:55:13 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456133665518_-2140879672","id":"20160222-093425_1179298604","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Data input</h2>\n"},"dateCreated":"Feb 22, 2016 9:34:25 AM","dateStarted":"Mar 3, 2016 5:55:13 PM","dateFinished":"Mar 3, 2016 5:55:13 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29"},{"text":"%flink\n\n// Read the data points\n\nval points =  env.readTextFile(pointsPath)\n                 .map( _.split(\" \").map(_.toDouble) )\n                 .map( x => new Point(x(0), x(1)) )\n                 \npoints.first(10).collect()","dateUpdated":"Mar 3, 2016 7:13:34 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456142963931_677309593","id":"20160222-120923_1420694648","result":{"code":"SUCCESS","type":"TEXT","msg":"points: org.apache.flink.api.scala.DataSet[Point] = org.apache.flink.api.scala.DataSet@478b2d\nres59: Seq[Point] = Buffer(23.59 8.67, -45.29 14.68, 39.44 38.09, -48.49 4.63, 38.47 43.81, 23.8 46.41, 12.31 47.07, -13.09 -19.11, -8.82 -40.48, -43.35 23.52)\n"},"dateCreated":"Feb 22, 2016 12:09:23 PM","dateStarted":"Mar 3, 2016 7:13:34 PM","dateFinished":"Mar 3, 2016 7:13:35 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30"},{"text":"%flink\n\n// Read random cluster centers\n\nval centroids = env.readTextFile(centersPath)\n                   .map( _.split(\" \") )\n                   .map( x => new Centroid(x(0).toInt, x(1).toDouble, x(2).toDouble) )\n                   \ncentroids.first(10).collect()","dateUpdated":"Mar 3, 2016 7:14:39 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456142989855_770449475","id":"20160222-120949_2069615265","result":{"code":"SUCCESS","type":"TEXT","msg":"<console>:46: warning: Type Centroid is no POJO, has immutable fields: value y, value x.\n                               .map( x => new Centroid(x(0).toInt, x(1).toDouble, x(2).toDouble) )\n                                   ^\ncentroids: org.apache.flink.api.scala.DataSet[Centroid] = org.apache.flink.api.scala.DataSet@1015b8ff\nres64: Seq[Centroid] = Buffer(1 -8.55 23.67, 2 -2.45 -5.13, 3 -31.08 -9.57, 4 13.94 -42.78, 5 -22.3 14.09, 6 31.35 15.91, 7 -21.17 -10.84, 8 -23.42 29.1, 9 -34.05 -18.85, 10 -4.99 -2.58)\n"},"dateCreated":"Feb 22, 2016 12:09:49 PM","dateStarted":"Mar 3, 2016 7:14:39 PM","dateFinished":"Mar 3, 2016 7:14:40 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31"},{"text":"%flink\n\n// Run the K-means classifier\n \nval finalCentroids = centroids.iterate(numIterations) { currentCentroids => // DataSet[Centroid] comes in\n\n    var newCentroids = points.map(new SelectNearestCenter).withBroadcastSet(currentCentroids, \"centroids\")\n    \n                             .map( x => (x._1, x._2, 1L) ).withForwardedFields(\"_1; _2\")\n                             \n                             .groupBy(0)\n                             \n                             .reduce( (p1, p2) => (p1._1, p1._2.add(p2._2), p1._3 + p2._3) ).withForwardedFields(\"_1\")\n                             \n                             .map( x => new Centroid(x._1, x._2.div(x._3)) ).withForwardedFields(\"_1->id\")\n\n    // DataSet[Centroid] comes out\n    newCentroids\n      \n}\n\nfinalCentroids.collect()","dateUpdated":"Mar 3, 2016 7:21:29 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455978081224_1383310036","id":"20160220-142121_160221221","result":{"code":"SUCCESS","type":"TEXT","msg":"<console>:63: warning: Type Centroid is no POJO, has immutable fields: value y, value x.\n                                         .map( x => new Centroid(x._1, x._2.div(x._3)) ).withForwardedFields(\"_1->id\")\n                                             ^\nfinalCentroids: org.apache.flink.api.scala.DataSet[Centroid] = org.apache.flink.api.scala.DataSet@25ebeeed\nres69: Seq[Centroid] = Buffer(1 16.88683673469388 46.260000000000005, 2 24.928124999999998 6.191041666666666, 3 -49.40531914893619 1.5134042553191485, 4 -7.304285714285713 -29.787142857142857, 5 -38.352758620689656 12.176206896551726, 6 45.98374999999999 39.83528846153846, 7 -17.56625 -16.380000000000003, 8 -47.37105263157895 26.046578947368417, 9 -38.77818181818182 -27.336818181818185, 10 -29.28540540540541 -0.38702702702702696)\n"},"dateCreated":"Feb 20, 2016 2:21:21 PM","dateStarted":"Mar 3, 2016 7:21:29 PM","dateFinished":"Mar 3, 2016 7:21:30 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:32"},{"text":"%md\n\n##Results","dateUpdated":"Mar 3, 2016 5:55:39 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455978645650_1394492945","id":"20160220-143045_569789329","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Results</h2>\n"},"dateCreated":"Feb 20, 2016 2:30:45 PM","dateStarted":"Mar 3, 2016 5:55:39 PM","dateFinished":"Mar 3, 2016 5:55:39 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:33"},{"text":"%flink\n\n// Assign cluster based on final centers\n\nval clusteredPoints: DataSet[(Int, Point)] = points.map( new SelectNearestCenter ).withBroadcastSet(finalCentroids, \"centroids\")\n\nclusteredPoints.first(10).collect()\n\nclusteredPoints.writeAsCsv(outputPath, \"\\n\", \" \", WriteMode.valueOf(\"OVERWRITE\"))","dateUpdated":"Mar 3, 2016 7:22:45 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456143037153_1446346024","id":"20160222-121037_2025302123","result":{"code":"SUCCESS","type":"TEXT","msg":"clusteredPoints: org.apache.flink.api.scala.DataSet[(Int, Point)] = org.apache.flink.api.scala.DataSet@29e82552\nres74: Seq[(Int, Point)] = Buffer((2,23.59 8.67), (5,-45.29 14.68), (6,39.44 38.09), (3,-48.49 4.63), (6,38.47 43.81), (1,23.8 46.41), (1,12.31 47.07), (7,-13.09 -19.11), (4,-8.82 -40.48), (8,-43.35 23.52))\nres76: org.apache.flink.api.java.operators.DataSink[(Int, Point)] = DataSink '<unnamed>' (CsvOutputFormat (path: FlinkKmeans/results, delimiter:  ))\n"},"dateCreated":"Feb 22, 2016 12:10:37 PM","dateStarted":"Mar 3, 2016 7:22:45 PM","dateFinished":"Mar 3, 2016 7:22:47 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:34"},{"text":"%md\n\n<center> ![Output](https://raw.githubusercontent.com/DataReplyUK/FlinkGroupLondon/master/2016-03-03%20KmeansZeppelinNotebook/output-clusters-plot.png) </center>","dateUpdated":"Mar 6, 2016 6:19:13 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456838479446_1685577482","id":"20160301-132119_924319007","result":{"code":"SUCCESS","type":"HTML","msg":"<p><center> <img src=\"https://raw.githubusercontent.com/DataReplyUK/FlinkGroupLondon/master/2016-03-03%20KmeansZeppelinNotebook/output-clusters-plot.png\" alt=\"Output\" /> </center></p>\n"},"dateCreated":"Mar 1, 2016 1:21:19 PM","dateStarted":"Mar 6, 2016 6:19:10 PM","dateFinished":"Mar 6, 2016 6:19:10 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:35","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456961705748_57856721","id":"20160302-233505_913623223","dateCreated":"Mar 2, 2016 11:35:05 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:36"}],"name":"Flink-K-Means","id":"2BDX47FVD","angularObjects":{"2BDMSADVA":[],"2BE3X4QPK":[],"2BDYNZPU9":[],"2BBWR4J84":[],"2BCNZXDKM":[],"2BEGFJQXT":[],"2BDMT94Q8":[],"2BEF7X1GT":[],"2BDZGQS7Z":[],"2BEG37SEF":[],"2BDENJHCR":[],"2BCSC5KA6":[],"2BDXAECKV":[],"2BC3CERJ7":[],"2BDK92TDP":[],"2BBT963D7":[],"2BC397YHY":[]},"config":{"looknfeel":"default"},"info":{}}